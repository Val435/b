// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================
// Journeys
// ========================
enum JourneyStatus {
  DRAFT
  RUNNING
  COMPLETED
  CANCELLED
}

model User {
  id               Int      @id @default(autoincrement())
  email            String   @unique
  phone            String
  createdAt        DateTime @default(now())
  countryCode      String
  name             String?
  state            String?
  city             String[] @default([]) // default []
  environment      String?
  education1       String[] @default([]) // default []
  education2       String[] @default([]) // default []
  family           String[] @default([]) // default []
  employment1      String[] @default([]) // default []
  employment2      String[] @default([]) // default []
  socialLife       String[] @default([]) // default []
  hobbies          String[] @default([]) // default []
  transportation   String[] @default([]) // default []
  pets             String[] @default([]) // default []
  greenSpace       String[] @default([]) // default []
  shopping         String[] @default([]) // default []
  restaurants      String[] @default([]) // default []
  occupancy        String?
  property         String?
  timeframe        String?
  priceRange       String?
  downPayment      String?
  employmentStatus String?
  grossAnnual      Int?
  credit           String?

  otpCodes       OtpCode[]
  Recommendation Recommendation[]
  journeys       Journey[]
}

model OtpCode {
  id          Int      @id @default(autoincrement())
  code        String
  phone       String
  email       String
  countryCode String
  expiresAt   DateTime
  userId      Int?
  user        User?    @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  attempts    Int      @default(0)
}

model Journey {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  completedAt DateTime?
  status      JourneyStatus @default(DRAFT)

  label String?

  // Snapshot de entrada (desde StartJourneyScreen)
  selectedState  String?
  selectedCities String[] @default([])
  inputs         Json?

  // Orden/posición que ya usas en create
  index Int @default(0)

  // Relaciones
  user   User @relation(fields: [userId], references: [id])
  userId Int

  // 1–1 (backrelation); la FK vive en Recommendation.journeyId
  recommendation Recommendation?

  @@index([userId, createdAt])
}

model Recommendation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  // vínculo 1–1 con Journey (FK aquí)
  journey   Journey? @relation(fields: [journeyId], references: [id])
  journeyId Int?     @unique

  propertySuggestion PropertySuggestion?

  areas RecommendedArea[]

  @@index([userId, createdAt])
}

model RecommendedArea {
  id              Int     @id @default(autoincrement())
  name            String
  state           String
  reason          String
  imageUrl        String?
  fullDescription String?

  recommendation   Recommendation @relation(fields: [recommendationId], references: [id])
  recommendationId Int

  raceEthnicity RaceEthnicity?
  incomeLevels  IncomeLevels?
  crimeData     CrimeData?

  schools School[]

  socialLife  SocialLife[]
  shopping    Shopping[]
  greenSpaces GreenSpace[]
  sports      Sport[]

  placesOfInterest String[]   @default([])
  lifestyleTags    String[]   @default([])
  properties       Property[]
}

model RaceEthnicity {
  id       Int             @id @default(autoincrement())
  white    Float
  hispanic Float
  asian    Float
  black    Float
  other    Float
  area     RecommendedArea @relation(fields: [areaId], references: [id])
  areaId   Int             @unique
}

model IncomeLevels {
  id                    Int             @id @default(autoincrement())
  perCapitaIncome       Float
  medianHouseholdIncome Float
  area                  RecommendedArea @relation(fields: [areaId], references: [id])
  areaId                Int             @unique
}

model CrimeData {
  id             Int             @id @default(autoincrement())
  violentCrimes  Int
  propertyCrimes Int
  totalCrimes    Int
  violentRate    Float
  propertyRate   Float
  totalRate      Float
  area           RecommendedArea @relation(fields: [areaId], references: [id])
  areaId         Int             @unique
}

model School {
  id              Int             @id @default(autoincrement())
  name            String
  description     String
  fullDescription String?
  imageUrl        String?
  website         String? // ← nullable
  area            RecommendedArea @relation(fields: [areaId], references: [id])
  areaId          Int
}

model SocialLife {
  id              Int             @id @default(autoincrement())
  name            String
  description     String
  fullDescription String?
  imageUrl        String?
  website         String? // ← nullable
  area            RecommendedArea @relation(fields: [areaId], references: [id])
  areaId          Int
}

model Shopping {
  id              Int             @id @default(autoincrement())
  name            String
  description     String
  fullDescription String?
  imageUrl        String?
  website         String? // ← nullable
  area            RecommendedArea @relation(fields: [areaId], references: [id])
  areaId          Int
}

model GreenSpace {
  id              Int             @id @default(autoincrement())
  name            String
  description     String
  fullDescription String?
  imageUrl        String?
  website         String? // ← nullable
  area            RecommendedArea @relation(fields: [areaId], references: [id])
  areaId          Int
}

model Sport {
  id              Int             @id @default(autoincrement())
  name            String
  description     String
  fullDescription String?
  imageUrl        String?
  website         String? // ← nullable
  area            RecommendedArea @relation(fields: [areaId], references: [id])
  areaId          Int
}

model Property {
  id              Int      @id @default(autoincrement())
  address         String
  price           String
  description     String
  fullDescription String?
  imageUrls       String[] @default([]) // default []
  type            String
  builtYear       Int
  lotSizeSqFt     Int
  parkingSpaces   Int
  inUnitLaundry   Boolean
  district        String

  area   RecommendedArea @relation(fields: [areaId], references: [id])
  areaId Int
}

model PropertySuggestion {
  id              Int     @id @default(autoincrement())
  type            String
  idealFor        String
  priceRange      String
  fullDescription String?

  recommendation   Recommendation @relation(fields: [recommendationId], references: [id])
  recommendationId Int            @unique
}
